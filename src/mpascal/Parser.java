
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 21 18:22:16 CST 2017
//----------------------------------------------------

package mpascal;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 21 18:22:16 CST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\012\007\000\002\002\004\000\002\012" +
    "\012\000\002\012\005\000\002\012\007\000\002\013\004" +
    "\000\002\013\004\000\002\014\006\000\002\014\004\000" +
    "\002\015\002\000\002\015\004\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\004\000\002\023\014\000\002\023\013\000\002\023\004" +
    "\000\002\026\012\000\002\026\011\000\002\026\004\000" +
    "\002\027\002\000\002\027\004\000\002\030\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\006\000\002\025" +
    "\005\000\002\017\002\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\020\005\000\002\034\003\000" +
    "\002\034\005\000\002\035\003\000\002\035\006\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\012" +
    "\000\002\043\003\000\002\043\005\000\002\043\004\000" +
    "\002\044\002\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\004\000\002\051\005\000\002\051\004\000" +
    "\002\045\005\000\002\045\004\000\002\046\010\000\002" +
    "\046\006\000\002\046\004\000\002\046\005\000\002\021" +
    "\010\000\002\021\004\000\002\047\006\000\002\047\004" +
    "\000\002\050\006\000\002\050\004\000\002\052\006\000" +
    "\002\052\010\000\002\052\004\000\002\053\006\000\002" +
    "\053\004\000\002\002\003\000\002\002\003\000\002\002" +
    "\005\000\002\002\003\000\002\022\006\000\002\022\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\005\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\003\000" +
    "\002\010\007\000\002\010\005\000\002\010\004\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\040\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\036\003\000\002" +
    "\036\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\054\003\000\002\055\003" +
    "\000\002\056\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\006\003\006\057\004\001\002\000\004\054" +
    "\021\001\002\000\004\002\354\001\002\000\014\003\014" +
    "\010\017\037\ufff8\060\010\061\007\001\002\000\006\003" +
    "\334\054\021\001\002\000\006\003\276\054\021\001\002" +
    "\000\014\003\ufff4\010\ufff4\037\ufff4\060\ufff4\061\ufff4\001" +
    "\002\000\004\063\274\001\002\000\014\003\ufff3\010\ufff3" +
    "\037\ufff3\060\ufff3\061\ufff3\001\002\000\004\040\273\001" +
    "\002\000\014\003\272\010\017\037\ufff8\060\010\061\007" +
    "\001\002\000\006\003\124\037\123\001\002\000\016\003" +
    "\022\010\uffe4\037\uffe4\054\021\060\uffe4\061\uffe4\001\002" +
    "\000\004\064\121\001\002\000\064\003\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\032\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\046\uffdd\047\063\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\055\uffdd\056\uffdd\064\uffdd\001\002\000\020\003\022\010" +
    "\uffe4\037\uffe4\054\021\060\uffe4\061\uffe4\064\060\001\002" +
    "\000\010\051\uffdf\052\uffdf\056\uffdf\001\002\000\006\051" +
    "\027\052\026\001\002\000\014\003\ufff5\010\ufff5\037\ufff5" +
    "\060\ufff5\061\ufff5\001\002\000\014\006\036\011\040\012" +
    "\032\013\033\014\035\001\002\000\004\054\021\001\002" +
    "\000\010\051\uffde\052\uffde\056\uffde\001\002\000\004\064" +
    "\uffdb\001\002\000\006\056\uffd9\064\uffd9\001\002\000\006" +
    "\056\uffd6\064\uffd6\001\002\000\004\064\uffda\001\002\000" +
    "\006\056\uffd8\064\uffd8\001\002\000\004\047\041\001\002" +
    "\000\004\064\uffe0\001\002\000\006\056\uffd7\064\uffd7\001" +
    "\002\000\012\065\050\066\042\067\046\070\047\001\002" +
    "\000\056\003\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\026\uff87\027\uff87\030\uff87\032\uff87\035\uff87" +
    "\036\uff87\040\uff87\042\uff87\043\uff87\046\uff87\050\uff87\051" +
    "\uff87\056\uff87\062\uff87\064\uff87\001\002\000\056\003\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\032\uff8c\035\uff8c\036\uff8c\040\uff8c" +
    "\042\uff8c\043\uff8c\046\uff8c\050\uff8c\051\uff8c\056\uff8c\062" +
    "\uff8c\064\uff8c\001\002\000\056\003\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\026\uff89\027\uff89\030" +
    "\uff89\032\uff89\035\uff89\036\uff89\040\uff89\042\uff89\043\uff89" +
    "\046\uff89\050\uff89\051\uff89\056\uff89\062\uff89\064\uff89\001" +
    "\002\000\056\003\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\026\uff8b\027\uff8b\030\uff8b\032\uff8b\035" +
    "\uff8b\036\uff8b\040\uff8b\042\uff8b\043\uff8b\046\uff8b\050\uff8b" +
    "\051\uff8b\056\uff8b\062\uff8b\064\uff8b\001\002\000\056\003" +
    "\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86" +
    "\026\uff86\027\uff86\030\uff86\032\uff86\035\uff86\036\uff86\040" +
    "\uff86\042\uff86\043\uff86\046\uff86\050\uff86\051\uff86\056\uff86" +
    "\062\uff86\064\uff86\001\002\000\056\003\uff85\015\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\022\uff85\026\uff85\027\uff85" +
    "\030\uff85\032\uff85\035\uff85\036\uff85\040\uff85\042\uff85\043" +
    "\uff85\046\uff85\050\uff85\051\uff85\056\uff85\062\uff85\064\uff85" +
    "\001\002\000\056\003\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\026\uff88\027\uff88\030\uff88\032\uff88" +
    "\035\uff88\036\uff88\040\uff88\042\uff88\043\uff88\046\uff88\050" +
    "\uff88\051\uff88\056\uff88\062\uff88\064\uff88\001\002\000\004" +
    "\062\053\001\002\000\056\003\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\032\uff8a\035\uff8a\036\uff8a\040\uff8a\042\uff8a\043\uff8a\046" +
    "\uff8a\050\uff8a\051\uff8a\056\uff8a\062\uff8a\064\uff8a\001\002" +
    "\000\012\065\050\066\042\067\046\070\047\001\002\000" +
    "\004\050\055\001\002\000\004\007\056\001\002\000\012" +
    "\011\040\012\032\013\033\014\035\001\002\000\004\064" +
    "\uffd5\001\002\000\016\003\022\010\uffe4\037\uffe4\054\021" +
    "\060\uffe4\061\uffe4\001\002\000\014\003\uffe1\010\uffe1\037" +
    "\uffe1\060\uffe1\061\uffe1\001\002\000\014\003\uffe2\010\uffe2" +
    "\037\uffe2\060\uffe2\061\uffe2\001\002\000\032\023\067\024" +
    "\072\026\071\027\070\031\066\033\101\054\021\055\065" +
    "\065\050\066\042\067\046\070\047\001\002\000\032\023" +
    "\067\024\072\026\071\027\070\031\066\033\101\054\021" +
    "\055\065\065\050\066\042\067\046\070\047\001\002\000" +
    "\032\023\067\024\072\026\071\027\070\031\066\033\101" +
    "\054\021\055\065\065\050\066\042\067\046\070\047\001" +
    "\002\000\032\023\uff94\024\uff94\026\uff94\027\uff94\031\uff94" +
    "\033\uff94\054\uff94\055\uff94\065\uff94\066\uff94\067\uff94\070" +
    "\uff94\001\002\000\032\023\uff90\024\uff90\026\uff90\027\uff90" +
    "\031\uff90\033\uff90\054\uff90\055\uff90\065\uff90\066\uff90\067" +
    "\uff90\070\uff90\001\002\000\032\023\uff91\024\uff91\026\uff91" +
    "\027\uff91\031\uff91\033\uff91\054\uff91\055\uff91\065\uff91\066" +
    "\uff91\067\uff91\070\uff91\001\002\000\032\023\uff92\024\uff92" +
    "\026\uff92\027\uff92\031\uff92\033\uff92\054\uff92\055\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\001\002\000\032\023\uff8f" +
    "\024\uff8f\026\uff8f\027\uff8f\031\uff8f\033\uff8f\054\uff8f\055" +
    "\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\001\002\000\032" +
    "\023\067\024\072\026\071\027\070\031\066\033\101\054" +
    "\021\055\065\065\050\066\042\067\046\070\047\001\002" +
    "\000\054\003\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7\035\uffa7" +
    "\036\uffa7\040\uffa7\042\uffa7\043\uffa7\046\uffa7\050\uffa7\051" +
    "\uffa7\056\uffa7\064\uffa7\001\002\000\032\023\067\024\072" +
    "\026\071\027\070\031\066\033\101\054\021\055\065\065" +
    "\050\066\042\067\046\070\047\001\002\000\054\003\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\032\uffa8\035\uffa8\036\uffa8\040\uffa8" +
    "\042\uffa8\043\uffa8\046\uffa8\050\uffa8\051\uffa8\056\uffa8\064" +
    "\uffa8\001\002\000\054\003\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\026\uffab\027\uffab\030\107\032" +
    "\110\035\uffab\036\uffab\040\uffab\042\uffab\043\uffab\046\uffab" +
    "\050\uffab\051\uffab\056\uffab\064\uffab\001\002\000\010\026" +
    "\104\027\103\050\105\001\002\000\032\023\uff93\024\uff93" +
    "\026\uff93\027\uff93\031\uff93\033\uff93\054\uff93\055\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\001\002\000\054\003\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\032\uffa6\035\uffa6\036\uffa6\040\uffa6" +
    "\042\uffa6\043\uffa6\046\uffa6\050\uffa6\051\uffa6\056\uffa6\064" +
    "\uffa6\001\002\000\032\023\067\024\072\026\071\027\070" +
    "\031\066\033\101\054\021\055\065\065\050\066\042\067" +
    "\046\070\047\001\002\000\032\023\067\024\072\026\071" +
    "\027\070\031\066\033\101\054\021\055\065\065\050\066" +
    "\042\067\046\070\047\001\002\000\062\003\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\032\uffdc\035\uffdc\036\uffdc\040\uffdc\042\uffdc" +
    "\043\uffdc\046\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055" +
    "\uffdc\056\uffdc\064\uffdc\001\002\000\054\003\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\026\uffad\027" +
    "\uffad\030\107\032\110\035\uffad\036\uffad\040\uffad\042\uffad" +
    "\043\uffad\046\uffad\050\uffad\051\uffad\056\uffad\064\uffad\001" +
    "\002\000\032\023\067\024\072\026\071\027\070\031\066" +
    "\033\101\054\021\055\065\065\050\066\042\067\046\070" +
    "\047\001\002\000\032\023\067\024\072\026\071\027\070" +
    "\031\066\033\101\054\021\055\065\065\050\066\042\067" +
    "\046\070\047\001\002\000\054\003\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\032\uffa9\035\uffa9\036\uffa9\040\uffa9\042\uffa9\043\uffa9" +
    "\046\uffa9\050\uffa9\051\uffa9\056\uffa9\064\uffa9\001\002\000" +
    "\054\003\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa\035\uffaa\036" +
    "\uffaa\040\uffaa\042\uffaa\043\uffaa\046\uffaa\050\uffaa\051\uffaa" +
    "\056\uffaa\064\uffaa\001\002\000\054\003\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\026\uffac\027\uffac" +
    "\030\107\032\110\035\uffac\036\uffac\040\uffac\042\uffac\043" +
    "\uffac\046\uffac\050\uffac\051\uffac\056\uffac\064\uffac\001\002" +
    "\000\054\003\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\035\uffa5" +
    "\036\uffa5\040\uffa5\042\uffa5\043\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\056\uffa5\064\uffa5\001\002\000\054\003\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\032\uffa3\035\uffa3\036\uffa3\040\uffa3\042\uffa3" +
    "\043\uffa3\046\uffa3\050\uffa3\051\uffa3\056\uffa3\064\uffa3\001" +
    "\002\000\010\026\104\027\103\056\117\001\002\000\054" +
    "\003\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\026\uffa2\027\uffa2\030\uffa2\032\uffa2\035\uffa2\036\uffa2" +
    "\040\uffa2\042\uffa2\043\uffa2\046\uffa2\050\uffa2\051\uffa2\056" +
    "\uffa2\064\uffa2\001\002\000\054\003\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\032\uffa4\035\uffa4\036\uffa4\040\uffa4\042\uffa4\043\uffa4" +
    "\046\uffa4\050\uffa4\051\uffa4\056\uffa4\064\uffa4\001\002\000" +
    "\016\003\022\010\uffe4\037\uffe4\054\021\060\uffe4\061\uffe4" +
    "\001\002\000\014\003\uffe3\010\uffe3\037\uffe3\060\uffe3\061" +
    "\uffe3\001\002\000\030\003\142\004\130\005\151\034\141" +
    "\037\123\040\uffd1\041\127\044\145\045\132\054\021\064" +
    "\uffd1\001\002\000\006\003\ufff6\037\ufff6\001\002\000\006" +
    "\003\126\063\ufffc\001\002\000\016\003\uffc5\036\uffc5\040" +
    "\uffc5\046\uffc5\063\uffc5\064\uffc5\001\002\000\004\054\021" +
    "\001\002\000\004\055\255\001\002\000\014\003\254\036" +
    "\uffcd\040\uffcd\046\uffcd\064\uffcd\001\002\000\030\003\142" +
    "\004\130\005\151\034\141\037\123\041\127\044\145\045" +
    "\132\046\uffd1\054\021\064\uffd1\001\002\000\014\003\250" +
    "\036\uffcc\040\uffcc\046\uffcc\064\uffcc\001\002\000\014\003" +
    "\uffc9\036\uffc9\040\uffc9\046\uffc9\064\uffc9\001\002\000\014" +
    "\003\126\036\uffc8\040\uffc8\046\uffc8\064\uffc8\001\002\000" +
    "\014\003\uffd0\036\uffd0\040\uffd0\046\uffd0\064\uffd0\001\002" +
    "\000\014\003\247\036\uffcf\040\uffcf\046\uffcf\064\uffcf\001" +
    "\002\000\004\040\246\001\002\000\034\023\067\024\072" +
    "\025\165\026\071\027\070\031\066\033\101\054\021\055" +
    "\163\065\050\066\042\067\046\070\047\001\002\000\036" +
    "\003\142\004\130\005\151\034\141\036\232\037\123\040" +
    "\uffd1\041\127\044\145\045\132\046\uffd1\054\021\056\233" +
    "\064\uffd1\001\002\000\014\003\237\036\uffce\040\uffce\046" +
    "\uffce\064\uffce\001\002\000\006\053\235\055\214\001\002" +
    "\000\034\023\067\024\072\025\165\026\071\027\070\031" +
    "\066\033\101\054\021\055\163\065\050\066\042\067\046" +
    "\070\047\001\002\000\014\003\161\036\uffca\040\uffca\046" +
    "\uffca\064\uffca\001\002\000\014\003\156\036\uffd4\040\uffd4" +
    "\046\uffd4\064\157\001\002\000\014\003\155\036\uffcb\040" +
    "\uffcb\046\uffcb\064\uffcb\001\002\000\004\055\152\001\002" +
    "\000\004\054\021\001\002\000\004\056\154\001\002\000" +
    "\014\003\uffb5\036\uffb5\040\uffb5\046\uffb5\064\uffb5\001\002" +
    "\000\014\003\uffb9\036\uffb9\040\uffb9\046\uffb9\064\uffb9\001" +
    "\002\000\014\003\uffc7\036\uffc7\040\uffc7\046\uffc7\064\uffc7" +
    "\001\002\000\034\003\142\004\130\005\151\034\141\036" +
    "\uffd1\037\123\040\uffd1\041\127\044\145\045\132\046\uffd1" +
    "\054\021\064\uffd1\001\002\000\014\003\uffd3\036\uffd3\040" +
    "\uffd3\046\uffd3\064\uffd3\001\002\000\014\003\uffb4\036\uffb4" +
    "\040\uffb4\046\uffb4\064\uffb4\001\002\000\004\043\227\001" +
    "\002\000\034\023\067\024\072\025\165\026\071\027\070" +
    "\031\066\033\101\054\021\055\163\065\050\066\042\067" +
    "\046\070\047\001\002\000\026\003\uffb0\035\uffb0\036\uffb0" +
    "\040\uffb0\042\uffb0\043\uffb0\046\uffb0\051\uffb0\056\uffb0\064" +
    "\uffb0\001\002\000\006\025\165\055\175\001\002\000\046" +
    "\003\uffb3\015\203\016\201\017\205\020\204\021\207\022" +
    "\206\026\104\027\103\035\uffb3\036\uffb3\040\uffb3\042\uffb3" +
    "\043\uffb3\046\uffb3\051\uffb3\056\uffb3\064\uffb3\001\002\000" +
    "\054\003\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\026\uffa6\027\uffa6\030\uffa6\032\uffa6\035\uffa6\036" +
    "\uffa6\040\uffa6\042\uffa6\043\uffa6\046\uffa6\051\uffa6\055\214" +
    "\056\uffa6\064\uffa6\001\002\000\032\003\uff9e\023\uff9e\024" +
    "\uff9e\035\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e\046\uff9e" +
    "\051\uff9e\056\uff9e\064\uff9e\001\002\000\032\003\uffa0\023" +
    "\212\024\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0\043\uffa0" +
    "\046\uffa0\051\uffa0\056\uffa0\064\uffa0\001\002\000\030\003" +
    "\uffb2\024\173\035\uffb2\036\uffb2\040\uffb2\042\uffb2\043\uffb2" +
    "\046\uffb2\051\uffb2\056\uffb2\064\uffb2\001\002\000\006\025" +
    "\165\055\175\001\002\000\032\003\uffa1\023\212\024\uffa1" +
    "\035\uffa1\036\uffa1\040\uffa1\042\uffa1\043\uffa1\046\uffa1\051" +
    "\uffa1\056\uffa1\064\uffa1\001\002\000\034\023\067\024\072" +
    "\025\165\026\071\027\070\031\066\033\101\054\021\055" +
    "\163\065\050\066\042\067\046\070\047\001\002\000\022" +
    "\015\203\016\201\017\205\020\204\021\207\022\206\026" +
    "\104\027\103\001\002\000\006\024\173\056\200\001\002" +
    "\000\032\003\uff9c\023\uff9c\024\uff9c\035\uff9c\036\uff9c\040" +
    "\uff9c\042\uff9c\043\uff9c\046\uff9c\051\uff9c\056\uff9c\064\uff9c" +
    "\001\002\000\032\023\uff99\024\uff99\026\uff99\027\uff99\031" +
    "\uff99\033\uff99\054\uff99\055\uff99\065\uff99\066\uff99\067\uff99" +
    "\070\uff99\001\002\000\032\023\067\024\072\026\071\027" +
    "\070\031\066\033\101\054\021\055\065\065\050\066\042" +
    "\067\046\070\047\001\002\000\032\023\uff9a\024\uff9a\026" +
    "\uff9a\027\uff9a\031\uff9a\033\uff9a\054\uff9a\055\uff9a\065\uff9a" +
    "\066\uff9a\067\uff9a\070\uff9a\001\002\000\032\023\uff97\024" +
    "\uff97\026\uff97\027\uff97\031\uff97\033\uff97\054\uff97\055\uff97" +
    "\065\uff97\066\uff97\067\uff97\070\uff97\001\002\000\032\023" +
    "\uff98\024\uff98\026\uff98\027\uff98\031\uff98\033\uff98\054\uff98" +
    "\055\uff98\065\uff98\066\uff98\067\uff98\070\uff98\001\002\000" +
    "\032\023\uff96\024\uff96\026\uff96\027\uff96\031\uff96\033\uff96" +
    "\054\uff96\055\uff96\065\uff96\066\uff96\067\uff96\070\uff96\001" +
    "\002\000\032\023\uff95\024\uff95\026\uff95\027\uff95\031\uff95" +
    "\033\uff95\054\uff95\055\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\001\002\000\010\026\104\027\103\056\211\001\002" +
    "\000\032\003\uff9d\023\uff9d\024\uff9d\035\uff9d\036\uff9d\040" +
    "\uff9d\042\uff9d\043\uff9d\046\uff9d\051\uff9d\056\uff9d\064\uff9d" +
    "\001\002\000\006\025\165\055\175\001\002\000\032\003" +
    "\uff9f\023\uff9f\024\uff9f\035\uff9f\036\uff9f\040\uff9f\042\uff9f" +
    "\043\uff9f\046\uff9f\051\uff9f\056\uff9f\064\uff9f\001\002\000" +
    "\036\023\067\024\072\025\165\026\071\027\070\031\066" +
    "\033\101\054\021\055\163\056\215\065\050\066\042\067" +
    "\046\070\047\001\002\000\026\003\uffae\035\uffae\036\uffae" +
    "\040\uffae\042\uffae\043\uffae\046\uffae\051\uffae\056\uffae\064" +
    "\uffae\001\002\000\004\056\222\001\002\000\006\051\220" +
    "\056\uff8e\001\002\000\034\023\067\024\072\025\165\026" +
    "\071\027\070\031\066\033\101\054\021\055\163\065\050" +
    "\066\042\067\046\070\047\001\002\000\004\056\uff8d\001" +
    "\002\000\026\003\uffaf\035\uffaf\036\uffaf\040\uffaf\042\uffaf" +
    "\043\uffaf\046\uffaf\051\uffaf\056\uffaf\064\uffaf\001\002\000" +
    "\032\023\067\024\072\026\071\027\070\031\066\033\101" +
    "\054\021\055\065\065\050\066\042\067\046\070\047\001" +
    "\002\000\032\003\uffb1\026\104\027\103\035\uffb1\036\uffb1" +
    "\040\uffb1\042\uffb1\043\uffb1\046\uffb1\051\uffb1\056\uffb1\064" +
    "\uffb1\001\002\000\032\003\uff9b\023\uff9b\024\uff9b\035\uff9b" +
    "\036\uff9b\040\uff9b\042\uff9b\043\uff9b\046\uff9b\051\uff9b\056" +
    "\uff9b\064\uff9b\001\002\000\024\015\203\016\201\017\205" +
    "\020\204\021\207\022\206\026\104\027\103\056\117\001" +
    "\002\000\034\003\230\004\130\005\151\034\141\036\uffd1" +
    "\037\123\040\uffd1\041\127\044\145\045\132\046\uffd1\054" +
    "\021\064\uffd1\001\002\000\006\036\232\056\233\001\002" +
    "\000\014\003\156\036\uffbc\040\uffbc\046\uffbc\064\uffbc\001" +
    "\002\000\034\003\230\004\130\005\151\034\141\036\uffd1" +
    "\037\123\040\uffd1\041\127\044\145\045\132\046\uffd1\054" +
    "\021\064\uffd1\001\002\000\014\003\uffb6\036\uffb6\040\uffb6" +
    "\046\uffb6\064\uffb6\001\002\000\014\003\156\036\uffbf\040" +
    "\uffbf\046\uffbf\064\uffbf\001\002\000\034\023\067\024\072" +
    "\025\165\026\071\027\070\031\066\033\101\054\021\055" +
    "\163\065\050\066\042\067\046\070\047\001\002\000\016" +
    "\003\uffc4\036\uffc4\040\uffc4\042\uffc4\046\uffc4\064\uffc4\001" +
    "\002\000\014\003\uffc0\036\uffc0\040\uffc0\046\uffc0\064\uffc0" +
    "\001\002\000\014\003\uffd2\036\uffd2\040\uffd2\046\uffd2\064" +
    "\uffd2\001\002\000\004\035\242\001\002\000\034\003\230" +
    "\004\130\005\151\034\141\036\uffd1\037\123\040\uffd1\041" +
    "\127\044\145\045\132\046\uffd1\054\021\064\uffd1\001\002" +
    "\000\014\003\156\036\244\040\uffc1\046\uffc1\064\uffc1\001" +
    "\002\000\034\003\230\004\130\005\151\034\141\036\uffd1" +
    "\037\123\040\uffd1\041\127\044\145\045\132\046\uffd1\054" +
    "\021\064\uffd1\001\002\000\014\003\156\036\uffc2\040\uffc2" +
    "\046\uffc2\064\uffc2\001\002\000\016\003\uffc6\036\uffc6\040" +
    "\uffc6\046\uffc6\063\uffc6\064\uffc6\001\002\000\016\003\uffc3" +
    "\036\uffc3\040\uffc3\042\uffc3\046\uffc3\064\uffc3\001\002\000" +
    "\014\003\uffbb\036\uffbb\040\uffbb\046\uffbb\064\uffbb\001\002" +
    "\000\004\046\252\001\002\000\034\023\067\024\072\025" +
    "\165\026\071\027\070\031\066\033\101\054\021\055\163" +
    "\065\050\066\042\067\046\070\047\001\002\000\014\003" +
    "\uffba\036\uffba\040\uffba\046\uffba\064\uffba\001\002\000\014" +
    "\003\uffbd\036\uffbd\040\uffbd\046\uffbd\064\uffbd\001\002\000" +
    "\004\070\047\001\002\000\006\051\257\056\260\001\002" +
    "\000\004\054\021\001\002\000\014\003\uffb8\036\uffb8\040" +
    "\uffb8\046\uffb8\064\uffb8\001\002\000\004\056\262\001\002" +
    "\000\014\003\uffb7\036\uffb7\040\uffb7\046\uffb7\064\uffb7\001" +
    "\002\000\004\053\235\001\002\000\006\003\247\042\265" +
    "\001\002\000\034\023\067\024\072\025\165\026\071\027" +
    "\070\031\066\033\101\054\021\055\163\065\050\066\042" +
    "\067\046\070\047\001\002\000\004\043\267\001\002\000" +
    "\034\003\142\004\130\005\151\034\141\036\uffd1\037\123" +
    "\040\uffd1\041\127\044\145\045\132\046\uffd1\054\021\064" +
    "\uffd1\001\002\000\014\003\uffbe\036\uffbe\040\uffbe\046\uffbe" +
    "\064\uffbe\001\002\000\006\003\124\037\ufff7\001\002\000" +
    "\014\003\ufff2\010\ufff2\037\ufff2\060\ufff2\061\ufff2\001\002" +
    "\000\006\003\ufffb\063\ufffb\001\002\000\004\002\ufffe\001" +
    "\002\000\004\055\277\001\002\000\014\003\uffec\010\uffec" +
    "\037\uffec\060\uffec\061\uffec\001\002\000\010\010\304\054" +
    "\021\056\302\001\002\000\006\056\uffe8\064\332\001\002" +
    "\000\004\056\326\001\002\000\004\064\312\001\002\000" +
    "\006\051\027\052\310\001\002\000\004\054\021\001\002" +
    "\000\006\051\027\052\306\001\002\000\012\011\040\012" +
    "\032\013\033\014\035\001\002\000\006\056\uffe6\064\uffe6" +
    "\001\002\000\012\011\040\012\032\013\033\014\035\001" +
    "\002\000\006\056\uffe5\064\uffe5\001\002\000\006\010\316" +
    "\037\uffeb\001\002\000\006\003\324\064\325\001\002\000" +
    "\004\037\321\001\002\000\006\010\316\037\uffeb\001\002" +
    "\000\012\003\022\010\uffe4\037\uffe4\054\021\001\002\000" +
    "\006\010\uffe9\037\uffe9\001\002\000\004\037\uffea\001\002" +
    "\000\030\003\142\004\130\005\151\034\141\037\123\040" +
    "\uffd1\041\127\044\145\045\132\054\021\064\uffd1\001\002" +
    "\000\004\040\323\001\002\000\006\003\ufffa\064\ufffa\001" +
    "\002\000\006\003\ufff9\064\ufff9\001\002\000\014\003\uffed" +
    "\010\uffed\037\uffed\060\uffed\061\uffed\001\002\000\004\064" +
    "\327\001\002\000\006\010\316\037\uffeb\001\002\000\006" +
    "\003\324\064\331\001\002\000\014\003\uffee\010\uffee\037" +
    "\uffee\060\uffee\061\uffee\001\002\000\006\010\304\054\021" +
    "\001\002\000\004\056\uffe7\001\002\000\014\003\uffef\010" +
    "\uffef\037\uffef\060\uffef\061\uffef\001\002\000\004\055\336" +
    "\001\002\000\010\010\304\054\021\056\340\001\002\000" +
    "\004\056\346\001\002\000\004\052\341\001\002\000\014" +
    "\006\036\011\040\012\032\013\033\014\035\001\002\000" +
    "\004\064\343\001\002\000\006\010\316\037\uffeb\001\002" +
    "\000\006\003\324\064\345\001\002\000\014\003\ufff0\010" +
    "\ufff0\037\ufff0\060\ufff0\061\ufff0\001\002\000\004\052\347" +
    "\001\002\000\014\006\036\011\040\012\032\013\033\014" +
    "\035\001\002\000\004\064\351\001\002\000\006\010\316" +
    "\037\uffeb\001\002\000\006\003\324\064\353\001\002\000" +
    "\014\003\ufff1\010\ufff1\037\ufff1\060\ufff1\061\ufff1\001\002" +
    "\000\004\002\000\001\002\000\006\055\356\064\357\001" +
    "\002\000\004\054\021\001\002\000\014\003\014\010\017" +
    "\037\ufff8\060\010\061\007\001\002\000\006\003\361\063" +
    "\362\001\002\000\004\002\ufffd\001\002\000\004\002\001" +
    "\001\002\000\006\051\027\056\364\001\002\000\004\064" +
    "\365\001\002\000\014\003\014\010\017\037\ufff8\060\010" +
    "\061\007\001\002\000\004\063\367\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\012\004\001\001\000\004\035\354\001" +
    "\001\000\002\001\001\000\014\013\011\015\015\016\014" +
    "\023\010\026\012\001\001\000\004\035\334\001\001\000" +
    "\004\035\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\270\016" +
    "\014\023\010\026\012\001\001\000\004\051\124\001\001" +
    "\000\012\017\024\020\017\034\023\035\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\060\020\017" +
    "\034\023\035\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\036\032\030\033\033" +
    "\001\001\000\004\035\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\050\054\042\055\044" +
    "\056\051\057\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\053\054\042\055\044\056\051" +
    "\057\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\056\001\001\000\002\001\001\000\012\017\061" +
    "\020\017\034\023\035\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\077\004\076\005\075\011\073" +
    "\035\101\040\072\041\074\042\063\054\042\055\044\056" +
    "\051\057\043\001\001\000\026\005\117\011\073\035\101" +
    "\040\072\041\074\042\063\054\042\055\044\056\051\057" +
    "\043\001\001\000\032\003\115\004\076\005\075\011\073" +
    "\035\101\040\072\041\074\042\063\054\042\055\044\056" +
    "\051\057\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\114\011\073\035\101\040\072\041\074\042\063" +
    "\054\042\055\044\056\051\057\043\001\001\000\002\001" +
    "\001\000\026\005\113\011\073\035\101\040\072\041\074" +
    "\042\063\054\042\055\044\056\051\057\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\112\005\075\011" +
    "\073\035\101\040\072\041\074\042\063\054\042\055\044" +
    "\056\051\057\043\001\001\000\030\004\105\005\075\011" +
    "\073\035\101\040\072\041\074\042\063\054\042\055\044" +
    "\056\051\057\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\111\011\073\035\101\040\072\041\074" +
    "\042\063\054\042\055\044\056\051\057\043\001\001\000" +
    "\026\005\110\011\073\035\101\040\072\041\074\042\063" +
    "\054\042\055\044\056\051\057\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\121\020\017\034\023\035\022" +
    "\001\001\000\002\001\001\000\032\021\130\022\135\035" +
    "\143\043\137\044\146\045\136\046\142\047\132\050\147" +
    "\051\134\052\133\053\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\262\045\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\021" +
    "\130\022\135\035\143\043\250\044\146\045\136\046\142" +
    "\047\132\050\147\051\134\052\133\053\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\002" +
    "\240\003\165\004\076\005\075\006\171\007\170\010\167" +
    "\011\073\022\163\035\166\040\072\041\074\042\063\054" +
    "\042\055\044\056\051\057\043\001\001\000\032\021\130" +
    "\022\135\035\143\043\237\044\146\045\136\046\142\047" +
    "\132\050\147\051\134\052\133\053\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\002\161\003\165\004" +
    "\076\005\075\006\171\007\170\010\167\011\073\022\163" +
    "\035\166\040\072\041\074\042\063\054\042\055\044\056" +
    "\051\057\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\021\130\022\135\035\143\043" +
    "\157\044\146\045\136\046\142\047\132\050\147\051\134" +
    "\052\133\053\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\225\004\076\005\075" +
    "\006\176\007\170\010\167\011\073\035\101\040\072\041" +
    "\074\042\063\054\042\055\044\056\051\057\043\001\001" +
    "\000\002\001\001\000\004\010\224\001\001\000\004\037" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\173\010\167\001" +
    "\001\000\002\001\001\000\040\003\175\004\076\005\075" +
    "\006\176\007\170\010\167\011\073\035\101\040\072\041" +
    "\074\042\063\054\042\055\044\056\051\057\043\001\001" +
    "\000\004\037\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\207\004\076\005\075" +
    "\011\073\035\101\040\072\041\074\042\063\054\042\055" +
    "\044\056\051\057\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\212" +
    "\001\001\000\002\001\001\000\046\002\216\003\165\004" +
    "\076\005\075\006\171\007\170\010\167\011\073\022\163" +
    "\035\166\036\215\040\072\041\074\042\063\054\042\055" +
    "\044\056\051\057\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\002\216\003\165\004" +
    "\076\005\075\006\171\007\170\010\167\011\073\022\163" +
    "\035\166\036\220\040\072\041\074\042\063\054\042\055" +
    "\044\056\051\057\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\223\004\076\005\075\011\073\035" +
    "\101\040\072\041\074\042\063\054\042\055\044\056\051" +
    "\057\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\201\001\001\000\030\021\130\022\135\035\143" +
    "\044\230\045\136\046\142\047\132\050\147\051\134\052" +
    "\133\053\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\021\130\022\135\035\143\044\233\045\136\046" +
    "\142\047\132\050\147\051\134\052\133\053\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\235\003" +
    "\165\004\076\005\075\006\171\007\170\010\167\011\073" +
    "\022\163\035\166\040\072\041\074\042\063\054\042\055" +
    "\044\056\051\057\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\021" +
    "\130\022\135\035\143\044\242\045\136\046\142\047\132" +
    "\050\147\051\134\052\133\053\145\001\001\000\002\001" +
    "\001\000\030\021\130\022\135\035\143\044\244\045\136" +
    "\046\142\047\132\050\147\051\134\052\133\053\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\252\003" +
    "\165\004\076\005\075\006\171\007\170\010\167\011\073" +
    "\022\163\035\166\040\072\041\074\042\063\054\042\055" +
    "\044\056\051\057\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\255\001\001\000\002\001\001\000" +
    "\004\035\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\002\265\003\165\004\076\005\075\006\171\007\170" +
    "\010\167\011\073\022\163\035\166\040\072\041\074\042" +
    "\063\054\042\055\044\056\051\057\043\001\001\000\002" +
    "\001\001\000\032\021\130\022\135\035\143\043\267\044" +
    "\146\045\136\046\142\047\132\050\147\051\134\052\133" +
    "\053\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\300\025\277\034" +
    "\302\035\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\304\035" +
    "\022\001\001\000\002\001\001\000\004\032\306\001\001" +
    "\000\002\001\001\000\004\032\310\001\001\000\002\001" +
    "\001\000\010\014\312\027\313\030\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\317\030\314\001" +
    "\001\000\012\017\316\020\017\034\023\035\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\021\130\022" +
    "\135\035\143\043\321\044\146\045\136\046\142\047\132" +
    "\050\147\051\134\052\133\053\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\327\027\313\030\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\332" +
    "\025\277\034\302\035\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\336\025\277" +
    "\034\302\035\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\341\032\030\033\033\001\001\000\002" +
    "\001\001\000\010\014\343\027\313\030\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\347\032\030\033\033\001\001\000\002\001\001\000" +
    "\010\014\351\027\313\030\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\362\035\022\001\001\000\014\013\357\015\015" +
    "\016\014\023\010\026\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\365\015\015\016\014\023\010\026" +
    "\012\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        @Override
	public void report_error(String message, Object info) {
            System.err.print("Syntax error: " ); 
            //expected();
            System.err.println("found token \'" + ((Symbol)info).value + "\' at line: " + ((Symbol)info).left + ", column: " + ((Symbol)info).right + ". " ); 
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.print("Sinctacti errors: " ); 
            //expected();
            //System.err.println("pero se encontró el token \'" + sym.terminalNames[s.sym] + "\' en la Linea: " + s.left + ", column: " + s.right + ". " ); 
	}


        public void report_fatal_error(String message, Object info) {
            throw new Error("Fatal error, couldn't recover.");
        }

        public void unrecovered_syntax_error(Symbol s) {
        }

        @Override
        public int error_sync_size(){
            return 1;
        }
        

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


        SymbolTable ts = new SymbolTable();
        int offset = 0;
        String ambito = "main";

        /* Contruccion del arbol en XML */

        Document xmlDocument = null;    
        Element nodoPadre = null; 

        private void iniXML() {
            if (xmlDocument == null) {
                try {
                    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                    xmlDocument = docBuilder.newDocument();//Crear el documento XML
                } catch (Exception e) {
                    System.err.println("el Arbol tiene ERROR: " + e.getMessage());
                }
            }
        }

        public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
            //Escribir el archivo XML         
            xmlDocument.appendChild(nodoPadre);
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource origen = new DOMSource(xmlDocument);
            StreamResult result = new StreamResult(new File("AST.xml"));
            transformer.transform(origen, result);
        }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // string ::= StringLit 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value","\'"+s+"\'");
                    nPadre.setAttribute("Line", sleft + "");
                    nPadre.setAttribute("Column", sright  + "");
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // boolean ::= BooleanLit 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);    
                    nPadre.setAttribute("Line", bleft + "");
                    nPadre.setAttribute("Column", bright + "");      
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // character ::= CharLit 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value","\'"+c.toString()+"\'");      
                    nPadre.setAttribute("Line", cleft + "");
                    nPadre.setAttribute("Column", cright + "");      
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // integer ::= IntLit 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    nPadre.setAttribute("Size","4");
                    nPadre.setAttribute("Line", ileft + "");
                    nPadre.setAttribute("Column", iright + "");
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // literal ::= string 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","string");
                    nPadre.setAttribute("Value",s.getAttribute("Value"));
                    nPadre.setAttribute("Line", s.getAttribute("Line"));
                    nPadre.setAttribute("Column", s.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // literal ::= boolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","boolean");
                    nPadre.setAttribute("Value",b.getAttribute("Value"));
                    nPadre.setAttribute("Line", b.getAttribute("Line"));
                    nPadre.setAttribute("Column", b.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literal ::= character 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","char");
                    nPadre.setAttribute("Value",c.getAttribute("Value"));
                    nPadre.setAttribute("Line", c.getAttribute("Line"));
                    nPadre.setAttribute("Column", c.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal ::= integer 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    nPadre.setAttribute("Type","integer");
                    nPadre.setAttribute("Value",String.valueOf(i.getAttribute("Value")));
                    nPadre.setAttribute("Line", i.getAttribute("Line"));
                    nPadre.setAttribute("Column", i.getAttribute("Column"));
                    RESULT =nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exprlist ::= expr Comma exprlist 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = el.getChildNodes();
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exprlist ::= expr 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opLogico ::= Or 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opLogico ::= And 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opUnario ::= Minus 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opUnario ::= Sum 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opArit ::= Div 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opArit ::= Mod 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opRelacion ::= GreaterEqualThan 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opRelacion ::= LessEqualThan 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opRelacion ::= LessThan 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LessThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opRelacion ::= GreaterThan 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("GreaterThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opRelacion ::= NotEqual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Different");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opRelacion ::= Equal 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Equals");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BoolExpr3 ::= Not BoolExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("NOT");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    nPadre.appendChild(e1);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BoolExpr3 ::= LPar BoolExpr1 RPar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BoolExpr3 ::= LPar AritExpr1 opRelacion AritExpr1 RPar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolExpr3",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BoolExpr2 ::= BoolExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolExpr2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BoolExpr2 ::= BoolExpr2 And BoolExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("AND");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolExpr2",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BoolExpr1 ::= BoolExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolExpr1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BoolExpr1 ::= BoolExpr1 Or BoolExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("OR");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BoolExpr1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AritExpr3 ::= LPar AritExpr1 RPar 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    RESULT = e1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AritExpr3 ::= opArit AritExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    RESULT = op;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AritExpr3 ::= opLogico AritExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    RESULT = op;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AritExpr3 ::= opUnario AritExpr3 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    RESULT = op;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AritExpr3 ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = v; 
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AritExpr3 ::= literal 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = l; 
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr3",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AritExpr2 ::= AritExpr3 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = e;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AritExpr2 ::= AritExpr2 Divided AritExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Div");
                    node.setAttribute("Value","/");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node   ;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AritExpr2 ::= AritExpr2 Times AritExpr3 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Times");
                    node.setAttribute("Value","*");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AritExpr1 ::= AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();                
                    RESULT = e1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AritExpr1 ::= AritExpr1 Minus AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Minus");
                    node.setAttribute("Value","-");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AritExpr1 ::= AritExpr1 Sum AritExpr2 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element node = xmlDocument.createElement("Plus");
                    node.setAttribute("Value","+");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AritExpr1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FunctionCall ::= var LPar RPar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FunctionCall ::= var LPar exprlist RPar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= FunctionCall 
            {
              Element RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element fc = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = fc;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= AritExpr1 opRelacion AritExpr1 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= BoolExpr1 
            {
              Element RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element b1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = b1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= AritExpr1 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();    
                    RESULT = e1;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // readstmt ::= readstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // readstmt ::= Read LPar var RPar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // writestmt ::= error RPar 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // writestmt ::= Write LPar string Comma var RPar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // writestmt ::= Write LPar string RPar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // repeatstmt ::= repeatstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // repeatstmt ::= Repeat stmts Until expr 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // whilestmt ::= whilestmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // whilestmt ::= While expr Do stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forstmt ::= forstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // forstmt ::= For assignstmt To expr Do stmts 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ifstmt ::= error Else stmt 
            {
              Element RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ifstmt ::= ifstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifstmt ::= If expr Then stmt 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ifstmt ::= If expr Then stmt Else stmt 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }

                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignstmt ::= assignstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignstmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignstmt ::= var Assign expr 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignstmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // blockstmt ::= blockstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // blockstmt ::= Begin stmts End 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Body");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= stmt error 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= blockstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= writestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();       
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= readstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= repeatstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= whilestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();   
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= forstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= ifstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();              
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= assignstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();               
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= FunctionCall 
            {
              Element RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element fc = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = fc;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmts ::= error stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmts ::= stmt Semicolon stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ss = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmts ::= stmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arraytype ::= Array LBracket literal DotDot literal RBracket Of identtype 
            {
              Element RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element l1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element l2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(t != null){
                        nPadre.setAttribute("Value","Array."+t+"."+l1.getAttribute("Value")+"."+l2.getAttribute("Value"));
                        int size = 0;
                        if(t.equals("integer")){
                            size = 4;
                        } else if(t.equals("boolean")){
                            size = 1;
                        } else if(t.equals("char")){
                            size = 1;
                        } else if(t.equals("string")){
                            size = 4;
                        }
                        int temp1 = Integer.parseInt(l1.getAttribute("Value"));
                        int temp2 = Integer.parseInt(l2.getAttribute("Value"));
                        nPadre.setAttribute("Size", ((temp2-temp1+1)*size)+"");
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arraytype",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // identtype ::= Integer 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identtype ::= Boolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identtype ::= String 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identtype ::= Char 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= arraytype 
            {
              Element RESULT =null;
		int atsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ats = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.setAttribute("Value",ats.getAttribute("Value"));
                        nPadre.setAttribute("Size",ats.getAttribute("Size"));
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= identtype 
            {
              Element RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        String size = "";
                        if(it.equals("integer")){
                            size = "4";
                        } else if(it.equals("boolean")){
                            size = "1";
                        } else if(it.equals("char")){
                            size = "1";
                        } else if(it.equals("string")){
                            size = "4";
                        }

                        nPadre.setAttribute("Size",size);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= Id LBracket AritExpr1 RBracket 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ARRAY");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    nPadre.appendChild(e1);
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= Id 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ID");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vars ::= vars Comma var 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    vs.appendChild(v);
                    RESULT = vs;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vars ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = v;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardecl ::= vars Colon type 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                String id = asd.get(i).getAttribute("Value");
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardecls ::= error vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardecls ::= error Semicolon vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vardecls ::= vardecl Semicolon vardecls 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclaration");
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else if(v != null && vs != null){
                        Element nPadre = xmlDocument.createElement("VarDeclarations");
                        nPadre.appendChild(v);
                        if (vs.getNodeName().equals("VarDeclaration")) {
                            nPadre.appendChild(vs);
                        } else {
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = vs.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vardecls ::= 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inlineArg ::= vars Colon identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                       ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","false");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inlineArg ::= Var vars Colon identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","true");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inlineArgs ::= inlineArg Semicolon inlineArgs 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ias = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    ArrayList<Element> asd = new ArrayList();
                    NodeList temp = ias.getChildNodes();
                    for (int i = 0; i < temp.getLength(); i++) {
                        asd.add((Element) temp.item(i));
                    }
                    for (int i = 0; i < asd.size(); i++) {
                        nPadre.appendChild(asd.get(i));
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inlineArgs ::= inlineArg 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procInlineDecl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecl",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procInlineDecls ::= procInlineDecl procInlineDecls 
            {
              Element RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element pd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element pds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procInlineDecls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedureDecl ::= Procedure error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedureDecl ::= Procedure var LPar RPar Semicolon blockProc Semicolon 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedureDecl ::= Procedure var LPar inlineArgs RPar Semicolon blockProc Semicolon 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionDecl ::= Function error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionDecl ::= Function var LPar RPar Colon type Semicolon blockProc Semicolon 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDecl ::= Function var LPar inlineArgs RPar Colon type Semicolon blockProc Semicolon 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= decl error 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= procedureDecl 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = p;                   
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= functionDecl 
            {
              Element RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = f;
                                        
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decls ::= decls error 
            {
              Element RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decls ::= decl decls 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        if (!ds.getNodeName().equals("Declarations")) {
                            nPadre.appendChild(ds);
                        }else{
                            Element nodoPadre = xmlDocument.createElement("ProgramArgs");
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = ds.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                            nodoPadre.appendChild(nPadre);
                        }
                       
                        RESULT = nPadre;
                    } else{ RESULT = null; }      
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // blockProc ::= blockProc error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockProc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // blockProc ::= procInlineDecls Begin stmts End 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockProc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= error End 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= decls blockstmt 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= Program var Semicolon block error 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error block Dot 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Program var LPar vars RPar Semicolon block Dot 
            {
              Element RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element v1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v1 != null) { nodoPadre.appendChild(v1); }
                    if (vs != null) { 
                        Element nPadre = xmlDocument.createElement("ProgramArgs");
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = vs.getChildNodes();
                        if (temp.getLength() > 0) {
                            Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                            asd.add((Element) parent);
                        }
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                        nodoPadre.appendChild(nPadre);
                    }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemAnal.llenarTablaSimbolos(nodoPadre);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= Program var Semicolon block Dot 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v != null) { nodoPadre.appendChild(v); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemAnal.llenarTablaSimbolos(nodoPadre);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

