package mpascal;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import org.w3c.dom.Document;
import org.w3c.dom.Element;  
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;


parser code {:
        
        @Override
	public void report_error(String message, Object info) {
            System.err.print("Syntax error: " ); 
            System.err.println("found token \'" + ((Symbol)info).value + "\' at line: " + ((Symbol)info).left + ", column: " + ((Symbol)info).right + ". " ); 
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.print("Syntax errors: " ); 
	}


        public void report_fatal_error(String message, Object info) {
            throw new Error("Fatal error, couldn't recover.");
        }

        public void unrecovered_syntax_error(Symbol s) {
        }

        @Override
        public int error_sync_size(){
            return 1;
        }
        
:};

action code {:
        SymbolTable ts = new SymbolTable();
        int offset = 0;
        String ambito = "main";

        Document TreeXML = null;    
        Element nodoPadre = null; 

        private void createXMLFile() {
            if (TreeXML == null) {
                try {
                    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                    TreeXML = docBuilder.newDocument();
                } catch (Exception e) {
                    System.err.println("el Arbol tiene ERROR: " + e.getMessage());
                }
            }
        }

        public void writeToXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
      
            TreeXML.appendChild(nodoPadre);
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource src = new DOMSource(TreeXML);
            StreamResult res = new StreamResult(new File("AST.xml"));
            transformer.transform(src, res);
        }
:}

//Functions
terminal Element  Write;
terminal Element  Read;


//Operators
terminal String   Equal;
terminal String   NotEqual;
terminal String   GreaterThan;
terminal String   LessThan;
terminal String   GreaterEqualThan;
terminal String   LessEqualThan;
terminal String   And;
terminal String   Or;
terminal String   Not;
terminal String   Sum;
terminal String   Minus;
terminal String   Times;
terminal String   Mod;
terminal String   Divided;
terminal String   Div;

//Statements
terminal Element  If;
terminal Element  Then;
terminal Element  Else;
terminal Element  Begin;
terminal Element  End;
terminal Element  For;
terminal Element  To;
terminal Element  Do;
terminal Element  While;
terminal Element  Repeat;
terminal Element  Until;

//DataTypes
terminal Element  Array;
terminal Element  Of;
terminal Element  Var;
terminal String   Boolean;
terminal String   Char;
terminal String   Integer;
terminal String   String;

//ETC
terminal String   LBracket;
terminal String   RBracket;
terminal String   Comma;
terminal String   Colon;
terminal String   Assign;
terminal String   Id;
terminal String   LPar;
terminal String   RPar;
terminal String   Program;
terminal String   Procedure;
terminal String   Function;
terminal String   DotDot;
terminal String   Dot;
terminal String   Semicolon;

//Literals
terminal String         IntLit;
terminal Character      CharLit;
terminal String         BooleanLit;
terminal String         StringLit;

/* Non terminals */

nonterminal Element              expr;
nonterminal Element              AddSubtractOp;
nonterminal Element              MultDivOp;
nonterminal Element              ExtraArithOp;
nonterminal Element              BoolOrOp;
nonterminal Element              BoolAndOp;
nonterminal Element              CompBoolOp;
nonterminal Element              literal;
nonterminal Element              pprogram;
nonterminal Element              block;
nonterminal Element              blockProc;
nonterminal Element              decls;
nonterminal Element              decl;
nonterminal Element              vardecls;
nonterminal Element              vardecl;
nonterminal Element              forstmt;
nonterminal Element              FunctionCall;

nonterminal Element              functionDecl;
nonterminal Element              inlineArgs;
nonterminal Element              inlineArg;
nonterminal Element              procedureDecl;
nonterminal Element              procInlineDecls;
nonterminal Element              procInlineDecl;

nonterminal Element              type;
nonterminal String               identtype;
nonterminal Element              arraytype;
nonterminal Element              vars;
nonterminal Element              var;

nonterminal Element              exprlist;
nonterminal Element              opRelacion;
nonterminal Element              ArithmeticOp;
nonterminal Element              UnaryOp;
nonterminal Element              LogicOp;
nonterminal Element              stmts;
nonterminal Element              stmt;
nonterminal Element              assignstmt;
nonterminal Element              ifstmt;
nonterminal Element              whilestmt;
nonterminal Element              repeatstmt;
nonterminal Element              blockstmt;
nonterminal Element              writestmt;
nonterminal Element              readstmt;

nonterminal Element              integer;
nonterminal Element              character;
nonterminal Element              boolean;
nonterminal Element              string;


/*-* Operator Precedences **/
precedence right Assign;
precedence left Equal, LessThan, GreaterThan, LessEqualThan, GreaterEqualThan, NotEqual;
precedence left Or;
precedence left Mod, Div, And;
precedence left Else, Semicolon;
precedence left error;


pprogram         ::= Program var:v Semicolon block:b Dot
                {:
                    createXMLFile();
                    nodoPadre = TreeXML.createElement("Program"); 
                    if (v != null) { nodoPadre.appendChild(v); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    writeToXML();
                    SemAnal.fillSymTable(nodoPadre);
                :}
                |   Program var:v1 LPar vars:vs RPar Semicolon block:b Dot
                {:
                    createXMLFile();
                    nodoPadre = TreeXML.createElement("Program"); 
                    if (v1 != null) { nodoPadre.appendChild(v1); }
                    if (vs != null) { 
                        Element nPadre = TreeXML.createElement("ProgramArgs");
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = vs.getChildNodes();
                        if (temp.getLength() > 0) {
                            Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                            asd.add((Element) parent);
                        }
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                        nodoPadre.appendChild(nPadre);
                    }
                    if(b != null) { nodoPadre.appendChild(b); }
                    writeToXML();
                    SemAnal.fillSymTable(nodoPadre);
                :}
                | error block Dot
                | Program var:v Semicolon block:b error
                ;

block           ::= decls:d blockstmt:s
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                :}
                |   error End
                ;

blockProc       ::= procInlineDecls:p Begin stmts:s End
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                :}
                |   blockProc error 
                ;

decls           ::= /* empty */ {: RESULT = null; :}
                |   decl:d decls:ds
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        if (!ds.getNodeName().equals("Declarations")) {
                            nPadre.appendChild(ds);
                        }else{
                            Element nodoPadre = TreeXML.createElement("ProgramArgs");
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = ds.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                            nodoPadre.appendChild(nPadre);
                        }
                       
                        RESULT = nPadre;
                    } else{ RESULT = null; }      
                :}
                |   decls:ds error 
                ;

decl            ::= Var vardecls:vd
                {:
                    createXMLFile();
                    RESULT = vd;
                :}
                |   functionDecl:f
                {:
                    createXMLFile();
                    RESULT = f;
                                        
                :}
                |   procedureDecl:p
                {:
                    createXMLFile();
                    RESULT = p;                   
                :}
                |   decl:d error
                ;

functionDecl    ::= Function var:i LPar inlineArgs:in RPar Colon type:t Semicolon blockProc:b Semicolon
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Function var:i LPar RPar Colon type:t Semicolon blockProc:b Semicolon
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    nPadre.setAttribute("Type", t.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Function error
                ;

procedureDecl   ::= Procedure var:i LPar inlineArgs:in RPar Semicolon blockProc:b Semicolon
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Procedure var:i LPar RPar Semicolon blockProc:b Semicolon
                {:
                    createXMLFile(); 
                    Element nPadre = TreeXML.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Procedure error 
                ;

procInlineDecls  ::= {: RESULT = null; :}
                |   procInlineDecl:pd procInlineDecls:pds
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                :}
                ;

procInlineDecl  ::= Var vardecls:vd
                {:
                    createXMLFile();
                    RESULT = vd;
                :}
                ;


inlineArgs      ::= inlineArg:ia
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Arguments");
                    nPadre.appendChild(ia);
                    RESULT = nPadre;
                :}
                |   inlineArg:ia Semicolon inlineArgs:ias
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Arguments");
                    nPadre.appendChild(ia);
                    ArrayList<Element> asd = new ArrayList();
                    NodeList temp = ias.getChildNodes();
                    for (int i = 0; i < temp.getLength(); i++) {
                        asd.add((Element) temp.item(i));
                    }
                    for (int i = 0; i < asd.size(); i++) {
                        nPadre.appendChild(asd.get(i));
                    }
                    RESULT = nPadre;
                :}
                ;

inlineArg       ::= Var vars:vs Colon identtype:t
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("inlineArg");
                    if(vs != null) {
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = TreeXML.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","true");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                :}
                |   vars:vs Colon identtype:t 
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("inlineArg");
                    if(vs != null) {
                       ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = TreeXML.createElement("Type");
                        nType.setAttribute("Value",t);
                        String size = "";
                        if(t.equals("integer")){
                            size = "4";
                        } else if(t.equals("boolean")){
                            size = "1";
                        } else if(t.equals("char")){
                            size = "1";
                        } else if(t.equals("string")){
                            size = "4";
                        }
                        nType.setAttribute("Size",size);
                        nType.setAttribute("isPointer","false");
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                :}
                ;

vardecls        ::=  /* Empty */
                |   vardecl:v Semicolon vardecls:vs
                {:
                    createXMLFile();
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        Element nPadre = TreeXML.createElement("VarDeclaration");
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else if(v != null && vs != null){
                        Element nPadre = TreeXML.createElement("VarDeclarations");
                        nPadre.appendChild(v);
                        if (vs.getNodeName().equals("VarDeclaration")) {
                            nPadre.appendChild(vs);
                        } else {
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = vs.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                        RESULT = nPadre;
                    } else RESULT = null;
                :} 
                |   error Semicolon vardecls:vs 
                |   error vardecls:vs  
                ;

vardecl         ::= vars:vs Colon type:t
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("VarDeclaration");
                    if (vs != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                String id = asd.get(i).getAttribute("Value");
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                :}
                ;

vars            ::= var:v
                {:
                    createXMLFile();
                    RESULT = v;                    
                :}
                |  vars:vs Comma var:v
                {:
                    createXMLFile();
                    vs.appendChild(v);
                    RESULT = vs;                    
                :}
                ;

var             ::= Id:i
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ID");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    RESULT = nPadre;                    
                :}
                |   Id:i LBracket AddSubtractOp:e1 RBracket
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ARRAY");
                    nPadre.setAttribute("Value",i);
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    nPadre.appendChild(e1);
                    RESULT = nPadre;                    
                :}
                ;

type            ::= identtype:it
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        String size = "";
                        if(it.equals("integer")){
                            size = "4";
                        } else if(it.equals("boolean")){
                            size = "1";
                        } else if(it.equals("char")){
                            size = "1";
                        } else if(it.equals("string")){
                            size = "4";
                        }

                        nPadre.setAttribute("Size",size);
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                |   arraytype:ats
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Type");
                    if(ats != null) {
                        nPadre.setAttribute("Value",ats.getAttribute("Value"));
                        nPadre.setAttribute("Size",ats.getAttribute("Size"));
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                ;

identtype       ::= Char:c
                {:
                   RESULT = c;
                :}
                |   String:c
                {:
                   RESULT = c;
                :}
                |   Boolean:c
                {:
                   RESULT = c;
                :}
                |   Integer:c
                {:
                   RESULT = c;
                :}
                ;


arraytype       ::= Array LBracket literal:l1 DotDot literal:l2 RBracket Of identtype:t
                {:  
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ArrayType");
                    if(t != null){
                        nPadre.setAttribute("Value","Array."+t+"."+l1.getAttribute("Value")+"."+l2.getAttribute("Value"));
                        int size = 0;
                        if(t.equals("integer")){
                            size = 4;
                        } else if(t.equals("boolean")){
                            size = 1;
                        } else if(t.equals("char")){
                            size = 1;
                        } else if(t.equals("string")){
                            size = 4;
                        }
                        int temp1 = Integer.parseInt(l1.getAttribute("Value"));
                        int temp2 = Integer.parseInt(l2.getAttribute("Value"));
                        nPadre.setAttribute("Size", ((temp2-temp1+1)*size)+"");
                    }
                    RESULT = nPadre;
                :}
                ;


stmts           ::= stmt:s
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                :}
                |   stmt:s Semicolon stmts:ss
                {:
                    Element nPadre = TreeXML.createElement("Statements");
                    createXMLFile();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                |   error stmts:s 
                ;

stmt            ::= /* Empty */ {: RESULT = null; :}
                |   FunctionCall:fc {:
                    createXMLFile();
                    RESULT = fc;
                :}
                | assignstmt:s
                {:
                    createXMLFile();               
                    RESULT = s;
                :}
                | ifstmt:s
                {:
                    createXMLFile();              
                    RESULT = s;
                :}
                | forstmt:s
                {:
                    createXMLFile();             
                    RESULT = s;
                :}
                | whilestmt:s
                {:
                    createXMLFile();   
                    RESULT = s;
                :}
                | repeatstmt:s
                {:
                    createXMLFile();          
                    RESULT = s;
                :}
                | readstmt:s
                {:
                    createXMLFile();          
                    RESULT = s;
                :}
                | writestmt:s
                {:
                    createXMLFile();       
                    RESULT = s;
                :}
                | blockstmt:s
                {:
                    createXMLFile();             
                    RESULT = s;
                :}
                |   stmt:s error  
                ;

blockstmt       ::= Begin stmts:s End
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Body");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                :}
                |   blockstmt error
                ;

assignstmt      ::= var:i Assign expr:e 
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                :}  
                |   assignstmt error
                ;

ifstmt          ::= If:i expr:e Then stmt:s Else stmt:s2
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }

                    RESULT = nPadre;
                :}
                |   If:i expr:e Then stmt:s
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("IfStatement");
                    nPadre.setAttribute("Line",ileft + "");
                    nPadre.setAttribute("Column",iright + "");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                |   ifstmt error
                |   error Else stmt:s2
                ;

forstmt         ::= For assignstmt:a To expr:e Do stmts:s
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                |   forstmt error
                ;

whilestmt       ::= While expr:e Do stmt:s
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                |   whilestmt error
                ;

repeatstmt      ::= Repeat stmts:s Until expr:e
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                :}
                |   repeatstmt error
                ;

writestmt       ::= Write LPar string:s RPar
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                |   Write LPar string:s Comma var:v RPar
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                :}
                |   error RPar
                ;

readstmt        ::= Read LPar var:v RPar
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ReadStatement");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                :}
                |   readstmt error
                ;

expr            ::= AddSubtractOp:e1
                {:
                    createXMLFile();    
                    RESULT = e1;
                :}
                |   BoolOrOp:b1 
                {:
                    createXMLFile();
                    RESULT = b1;
                :}
                |   AddSubtractOp:e1 opRelacion:op AddSubtractOp:e2
                {:
                    createXMLFile();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                :} 
                |   FunctionCall:fc
                {:
                    createXMLFile();
                    RESULT = fc;
                :}
                ;

FunctionCall    ::= var:v LPar exprlist:el RPar
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                :}
                |   var:v LPar RPar
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    RESULT = nPadre;
                :}
                ;

AddSubtractOp       ::= AddSubtractOp:e1 Sum MultDivOp:e2
                {:
                    createXMLFile();
                    Element node = TreeXML.createElement("Plus");
                    node.setAttribute("Value","+");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                :}
                |   AddSubtractOp:e1 Minus MultDivOp:e2
                {:
                    createXMLFile();
                    Element node = TreeXML.createElement("Minus");
                    node.setAttribute("Value","-");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                :}
                |   MultDivOp:e1
                {:
                    createXMLFile();                
                    RESULT = e1;
                :}
                ;

MultDivOp           ::= MultDivOp:e1 Times ExtraArithOp:e2
                {:
                    createXMLFile();
                    Element node = TreeXML.createElement("Times");
                    node.setAttribute("Value","*");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node;
                :}
                | MultDivOp:e1 Divided ExtraArithOp:e2
                {:
                    createXMLFile();
                    Element node = TreeXML.createElement("Div");
                    node.setAttribute("Value","/");
                    node.appendChild(e1);
                    node.appendChild(e2);
                    RESULT = node   ;
                :}
                |   ExtraArithOp:e 
                {:
                    createXMLFile();
                    RESULT = e;
                :}
                ;

ExtraArithOp       ::= literal:l
                {:
                    createXMLFile();
                    RESULT = l; 
                    
                :}
                |   var:v
                {:
                    createXMLFile();
                    RESULT = v; 
                    
                :}
                |  UnaryOp:op ExtraArithOp:e1
                {:
                    createXMLFile();
                    op.appendChild(e1);
                    RESULT = op;
                :}
                |  LogicOp:op ExtraArithOp:e1
                {:
                    createXMLFile();
                    op.appendChild(e1);
                    RESULT = op;
                :}
                |  ArithmeticOp:op ExtraArithOp:e1
                {:
                    createXMLFile();
                    op.appendChild(e1);
                    RESULT = op;
                :}
                |   LPar AddSubtractOp:e1 RPar
                {:
                    createXMLFile();
                    RESULT = e1;
                :}
                ;

BoolOrOp       ::= BoolOrOp:e1 Or:op BoolAndOp:e2
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("OR");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                :} 
                |   BoolAndOp:e1
                {:
                    createXMLFile();
                    RESULT = e1;
                :} 
                ;

BoolAndOp       ::= BoolAndOp:e1 And:op CompBoolOp:e2
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("AND");
                    nPadre.setAttribute("Value",op);
                    nPadre.appendChild(e1);
                    nPadre.appendChild(e2);
                    RESULT = nPadre;
                :} 
                | CompBoolOp:e1
                {:
                    createXMLFile();
                    RESULT = e1;
                :} 
                ;

CompBoolOp       ::= LPar AddSubtractOp:e1  opRelacion:op  AddSubtractOp:e2 RPar
                {:
                    createXMLFile();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                :} 
                | LPar BoolOrOp:e1 RPar
                {:
                    createXMLFile();
                    RESULT = e1;
                :}
                | Not:op CompBoolOp:e1
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("NOT");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    nPadre.appendChild(e1);
                    RESULT = nPadre;
                :}
                ;

opRelacion      ::= Equal:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Equals");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   NotEqual:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Different");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   GreaterThan:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("GreaterThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   LessThan:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("LessThan");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   LessEqualThan:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("LessOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   GreaterEqualThan:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("GreaterOrEqual");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;


ArithmeticOp          ::= Mod:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   Div:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;

UnaryOp        ::= Sum:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   Minus:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :} 
                ;

LogicOp        ::= And:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("AND");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   Or:op
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("OR");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;

exprlist        ::= expr:e
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                :}
                |   expr:e Comma exprlist:el
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Arguments");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = el.getChildNodes();
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                    }
                    RESULT = nPadre;
                :}
                ;

literal         ::= integer:i
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Literal");
                    nPadre.setAttribute("Type","integer");
                    nPadre.setAttribute("Value",String.valueOf(i.getAttribute("Value")));
                    nPadre.setAttribute("Line", i.getAttribute("Line"));
                    nPadre.setAttribute("Column", i.getAttribute("Column"));
                    RESULT =nPadre;
                :}
                |   character:c
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Literal");
                    nPadre.setAttribute("Type","char");
                    nPadre.setAttribute("Value",c.getAttribute("Value"));
                    nPadre.setAttribute("Line", c.getAttribute("Line"));
                    nPadre.setAttribute("Column", c.getAttribute("Column"));
                    RESULT =nPadre;
                :}                
                |   boolean:b
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Literal");
                    nPadre.setAttribute("Type","boolean");
                    nPadre.setAttribute("Value",b.getAttribute("Value"));
                    nPadre.setAttribute("Line", b.getAttribute("Line"));
                    nPadre.setAttribute("Column", b.getAttribute("Column"));
                    RESULT =nPadre;
                :}
                |   string:s
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Literal");
                    nPadre.setAttribute("Type","string");
                    nPadre.setAttribute("Value",s.getAttribute("Value"));
                    nPadre.setAttribute("Line", s.getAttribute("Line"));
                    nPadre.setAttribute("Column", s.getAttribute("Column"));
                    RESULT =nPadre;
                :}
                ;

integer         ::= IntLit:i 
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    nPadre.setAttribute("Size","4");
                    nPadre.setAttribute("Line", ileft + "");
                    nPadre.setAttribute("Column", iright + "");
                    RESULT = nPadre;
                :}
                ;

character       ::= CharLit:c
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Character");
                    nPadre.setAttribute("Value","\'"+c.toString()+"\'");      
                    nPadre.setAttribute("Line", cleft + "");
                    nPadre.setAttribute("Column", cright + "");      
                    RESULT = nPadre;
                :}
                ;

boolean         ::= BooleanLit:b
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("Boolean");
                    nPadre.setAttribute("Value",b);    
                    nPadre.setAttribute("Line", bleft + "");
                    nPadre.setAttribute("Column", bright + "");      
                    RESULT = nPadre;
                :}
                ;

string          ::= StringLit:s
                {:
                    createXMLFile();
                    Element nPadre = TreeXML.createElement("String");
                    nPadre.setAttribute("Value","\'"+s+"\'");
                    nPadre.setAttribute("Line", sleft + "");
                    nPadre.setAttribute("Column", sright  + "");
                    RESULT = nPadre;
                :}
                ;